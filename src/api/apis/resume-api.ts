/* tslint:disable */
/* eslint-disable */
/**
 * CVCreationPlatform.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CertificateDTO } from '../models';
import { EducationDTO } from '../models';
import { LanguageDTO } from '../models';
import { ResumeDTO } from '../models';
import { SkillsDTO } from '../models';
import { WorkExperienceDTO } from '../models';
/**
 * ResumeApi - axios parameter creator
 * @export
 */
export const ResumeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResumeResumesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiResumeResumesIdDelete.');
            }
            const localVarPath = `/api/Resume/resumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResumeResumesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiResumeResumesIdGet.');
            }
            const localVarPath = `/api/Resume/resumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [id2] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResumeResumesIdPutForm: async (id: string, id2?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiResumeResumesIdPutForm.');
            }
            const localVarPath = `/api/Resume/resumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }

            if (userId !== undefined) { 
                localVarFormParams.append('UserId', userId as any);
            }

            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }

            if (creationDate !== undefined) { 
                localVarFormParams.append('CreationDate', creationDate as any);
            }

            if (personalInfoPhoto !== undefined) { 
                localVarFormParams.append('PersonalInfo.Photo', personalInfoPhoto as any);
            }

            if (personalInfoPhotoUrl !== undefined) { 
                localVarFormParams.append('PersonalInfo.PhotoUrl', personalInfoPhotoUrl as any);
            }

            if (personalInfoFirstName !== undefined) { 
                localVarFormParams.append('PersonalInfo.FirstName', personalInfoFirstName as any);
            }

            if (personalInfoMiddleName !== undefined) { 
                localVarFormParams.append('PersonalInfo.MiddleName', personalInfoMiddleName as any);
            }

            if (personalInfoLastName !== undefined) { 
                localVarFormParams.append('PersonalInfo.LastName', personalInfoLastName as any);
            }

            if (personalInfoDescription !== undefined) { 
                localVarFormParams.append('PersonalInfo.Description', personalInfoDescription as any);
            }

            if (personalInfoAddress !== undefined) { 
                localVarFormParams.append('PersonalInfo.Address', personalInfoAddress as any);
            }

            if (personalInfoPhoneNumber !== undefined) { 
                localVarFormParams.append('PersonalInfo.PhoneNumber', personalInfoPhoneNumber as any);
            }

            if (personalInfoEmail !== undefined) { 
                localVarFormParams.append('PersonalInfo.Email', personalInfoEmail as any);
            }

            if (unknownSectionTitle !== undefined) { 
                localVarFormParams.append('UnknownSection.Title', unknownSectionTitle as any);
            }

            if (unknownSectionDescription !== undefined) { 
                localVarFormParams.append('UnknownSection.Description', unknownSectionDescription as any);
            }

            if (unknownSectionStartDate !== undefined) { 
                localVarFormParams.append('UnknownSection.StartDate', unknownSectionStartDate as any);
            }

            if (unknownSectionEndDate !== undefined) { 
                localVarFormParams.append('UnknownSection.EndDate', unknownSectionEndDate as any);
            }

            if (templateTemplateName !== undefined) { 
                localVarFormParams.append('Template.TemplateName', templateTemplateName as any);
            }
            if (certificates) {
                certificates.forEach((element) => {
                    localVarFormParams.append('Certificates', element as any);
                })
            }
            if (educations) {
                educations.forEach((element) => {
                    localVarFormParams.append('Educations', element as any);
                })
            }
            if (workExperiences) {
                workExperiences.forEach((element) => {
                    localVarFormParams.append('WorkExperiences', element as any);
                })
            }
            if (languages) {
                languages.forEach((element) => {
                    localVarFormParams.append('Languages', element as any);
                })
            }
            if (skills) {
                skills.forEach((element) => {
                    localVarFormParams.append('Skills', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResumeResumesPostForm: async (id?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Resume/resumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }

            if (userId !== undefined) { 
                localVarFormParams.append('UserId', userId as any);
            }

            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }

            if (creationDate !== undefined) { 
                localVarFormParams.append('CreationDate', creationDate as any);
            }

            if (personalInfoPhoto !== undefined) { 
                localVarFormParams.append('PersonalInfo.Photo', personalInfoPhoto as any);
            }

            if (personalInfoPhotoUrl !== undefined) { 
                localVarFormParams.append('PersonalInfo.PhotoUrl', personalInfoPhotoUrl as any);
            }

            if (personalInfoFirstName !== undefined) { 
                localVarFormParams.append('PersonalInfo.FirstName', personalInfoFirstName as any);
            }

            if (personalInfoMiddleName !== undefined) { 
                localVarFormParams.append('PersonalInfo.MiddleName', personalInfoMiddleName as any);
            }

            if (personalInfoLastName !== undefined) { 
                localVarFormParams.append('PersonalInfo.LastName', personalInfoLastName as any);
            }

            if (personalInfoDescription !== undefined) { 
                localVarFormParams.append('PersonalInfo.Description', personalInfoDescription as any);
            }

            if (personalInfoAddress !== undefined) { 
                localVarFormParams.append('PersonalInfo.Address', personalInfoAddress as any);
            }

            if (personalInfoPhoneNumber !== undefined) { 
                localVarFormParams.append('PersonalInfo.PhoneNumber', personalInfoPhoneNumber as any);
            }

            if (personalInfoEmail !== undefined) { 
                localVarFormParams.append('PersonalInfo.Email', personalInfoEmail as any);
            }

            if (unknownSectionTitle !== undefined) { 
                localVarFormParams.append('UnknownSection.Title', unknownSectionTitle as any);
            }

            if (unknownSectionDescription !== undefined) { 
                localVarFormParams.append('UnknownSection.Description', unknownSectionDescription as any);
            }

            if (unknownSectionStartDate !== undefined) { 
                localVarFormParams.append('UnknownSection.StartDate', unknownSectionStartDate as any);
            }

            if (unknownSectionEndDate !== undefined) { 
                localVarFormParams.append('UnknownSection.EndDate', unknownSectionEndDate as any);
            }

            if (templateTemplateName !== undefined) { 
                localVarFormParams.append('Template.TemplateName', templateTemplateName as any);
            }
            if (certificates) {
                certificates.forEach((element) => {
                    localVarFormParams.append('Certificates', element as any);
                })
            }
            if (educations) {
                educations.forEach((element) => {
                    localVarFormParams.append('Educations', element as any);
                })
            }
            if (workExperiences) {
                workExperiences.forEach((element) => {
                    localVarFormParams.append('WorkExperiences', element as any);
                })
            }
            if (languages) {
                languages.forEach((element) => {
                    localVarFormParams.append('Languages', element as any);
                })
            }
            if (skills) {
                skills.forEach((element) => {
                    localVarFormParams.append('Skills', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResumeUserResumesUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiResumeUserResumesUserIdGet.');
            }
            const localVarPath = `/api/Resume/userResumes/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResumeApi - functional programming interface
 * @export
 */
export const ResumeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ResumeApiAxiosParamCreator(configuration).apiResumeResumesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResumeDTO>>> {
            const localVarAxiosArgs = await ResumeApiAxiosParamCreator(configuration).apiResumeResumesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [id2] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdPutForm(id: string, id2?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ResumeApiAxiosParamCreator(configuration).apiResumeResumesIdPutForm(id, id2, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesPostForm(id?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ResumeApiAxiosParamCreator(configuration).apiResumeResumesPostForm(id, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeUserResumesUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ResumeApiAxiosParamCreator(configuration).apiResumeUserResumesUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResumeApi - factory interface
 * @export
 */
export const ResumeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ResumeApiFp(configuration).apiResumeResumesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResumeDTO>> {
            return ResumeApiFp(configuration).apiResumeResumesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [id2] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesIdPutForm(id: string, id2?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ResumeApiFp(configuration).apiResumeResumesIdPutForm(id, id2, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {string} [userId] 
         * @param {string} [title] 
         * @param {Date} [creationDate] 
         * @param {Blob} [personalInfoPhoto] 
         * @param {string} [personalInfoPhotoUrl] 
         * @param {string} [personalInfoFirstName] 
         * @param {string} [personalInfoMiddleName] 
         * @param {string} [personalInfoLastName] 
         * @param {string} [personalInfoDescription] 
         * @param {string} [personalInfoAddress] 
         * @param {string} [personalInfoPhoneNumber] 
         * @param {string} [personalInfoEmail] 
         * @param {string} [unknownSectionTitle] 
         * @param {string} [unknownSectionDescription] 
         * @param {Date} [unknownSectionStartDate] 
         * @param {Date} [unknownSectionEndDate] 
         * @param {string} [templateTemplateName] 
         * @param {Array<CertificateDTO>} [certificates] 
         * @param {Array<EducationDTO>} [educations] 
         * @param {Array<WorkExperienceDTO>} [workExperiences] 
         * @param {Array<LanguageDTO>} [languages] 
         * @param {Array<SkillsDTO>} [skills] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeResumesPostForm(id?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ResumeApiFp(configuration).apiResumeResumesPostForm(id, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResumeUserResumesUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ResumeApiFp(configuration).apiResumeUserResumesUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResumeApi - object-oriented interface
 * @export
 * @class ResumeApi
 * @extends {BaseAPI}
 */
export class ResumeApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public async apiResumeResumesIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ResumeApiFp(this.configuration).apiResumeResumesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public async apiResumeResumesIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResumeDTO>> {
        return ResumeApiFp(this.configuration).apiResumeResumesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {string} [id2] 
     * @param {string} [userId] 
     * @param {string} [title] 
     * @param {Date} [creationDate] 
     * @param {Blob} [personalInfoPhoto] 
     * @param {string} [personalInfoPhotoUrl] 
     * @param {string} [personalInfoFirstName] 
     * @param {string} [personalInfoMiddleName] 
     * @param {string} [personalInfoLastName] 
     * @param {string} [personalInfoDescription] 
     * @param {string} [personalInfoAddress] 
     * @param {string} [personalInfoPhoneNumber] 
     * @param {string} [personalInfoEmail] 
     * @param {string} [unknownSectionTitle] 
     * @param {string} [unknownSectionDescription] 
     * @param {Date} [unknownSectionStartDate] 
     * @param {Date} [unknownSectionEndDate] 
     * @param {string} [templateTemplateName] 
     * @param {Array<CertificateDTO>} [certificates] 
     * @param {Array<EducationDTO>} [educations] 
     * @param {Array<WorkExperienceDTO>} [workExperiences] 
     * @param {Array<LanguageDTO>} [languages] 
     * @param {Array<SkillsDTO>} [skills] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public async apiResumeResumesIdPutForm(id: string, id2?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ResumeApiFp(this.configuration).apiResumeResumesIdPutForm(id, id2, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [id] 
     * @param {string} [userId] 
     * @param {string} [title] 
     * @param {Date} [creationDate] 
     * @param {Blob} [personalInfoPhoto] 
     * @param {string} [personalInfoPhotoUrl] 
     * @param {string} [personalInfoFirstName] 
     * @param {string} [personalInfoMiddleName] 
     * @param {string} [personalInfoLastName] 
     * @param {string} [personalInfoDescription] 
     * @param {string} [personalInfoAddress] 
     * @param {string} [personalInfoPhoneNumber] 
     * @param {string} [personalInfoEmail] 
     * @param {string} [unknownSectionTitle] 
     * @param {string} [unknownSectionDescription] 
     * @param {Date} [unknownSectionStartDate] 
     * @param {Date} [unknownSectionEndDate] 
     * @param {string} [templateTemplateName] 
     * @param {Array<CertificateDTO>} [certificates] 
     * @param {Array<EducationDTO>} [educations] 
     * @param {Array<WorkExperienceDTO>} [workExperiences] 
     * @param {Array<LanguageDTO>} [languages] 
     * @param {Array<SkillsDTO>} [skills] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public async apiResumeResumesPostForm(id?: string, userId?: string, title?: string, creationDate?: Date, personalInfoPhoto?: Blob, personalInfoPhotoUrl?: string, personalInfoFirstName?: string, personalInfoMiddleName?: string, personalInfoLastName?: string, personalInfoDescription?: string, personalInfoAddress?: string, personalInfoPhoneNumber?: string, personalInfoEmail?: string, unknownSectionTitle?: string, unknownSectionDescription?: string, unknownSectionStartDate?: Date, unknownSectionEndDate?: Date, templateTemplateName?: string, certificates?: Array<CertificateDTO>, educations?: Array<EducationDTO>, workExperiences?: Array<WorkExperienceDTO>, languages?: Array<LanguageDTO>, skills?: Array<SkillsDTO>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ResumeApiFp(this.configuration).apiResumeResumesPostForm(id, userId, title, creationDate, personalInfoPhoto, personalInfoPhotoUrl, personalInfoFirstName, personalInfoMiddleName, personalInfoLastName, personalInfoDescription, personalInfoAddress, personalInfoPhoneNumber, personalInfoEmail, unknownSectionTitle, unknownSectionDescription, unknownSectionStartDate, unknownSectionEndDate, templateTemplateName, certificates, educations, workExperiences, languages, skills, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeApi
     */
    public async apiResumeUserResumesUserIdGet(userId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ResumeApiFp(this.configuration).apiResumeUserResumesUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
